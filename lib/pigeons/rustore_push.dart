// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class Message {
  Message({
    this.messageId,
    required this.priority,
    required this.ttl,
    this.collapseKey,
    required this.data,
    this.notification,
  });

  String? messageId;

  int priority;

  int ttl;

  String? collapseKey;

  Map<String?, String?> data;

  Notification? notification;

  Object encode() {
    return <Object?>[
      messageId,
      priority,
      ttl,
      collapseKey,
      data,
      notification?.encode(),
    ];
  }

  static Message decode(Object result) {
    result as List<Object?>;
    return Message(
      messageId: result[0] as String?,
      priority: result[1]! as int,
      ttl: result[2]! as int,
      collapseKey: result[3] as String?,
      data: (result[4] as Map<Object?, Object?>?)!.cast<String?, String?>(),
      notification: result[5] != null
          ? Notification.decode(result[5]! as List<Object?>)
          : null,
    );
  }
}

class Notification {
  Notification({
    this.title,
    this.body,
    this.channelId,
    this.imageUrl,
    this.color,
    this.icon,
    this.clickAction,
  });

  String? title;

  String? body;

  String? channelId;

  String? imageUrl;

  String? color;

  String? icon;

  String? clickAction;

  Object encode() {
    return <Object?>[
      title,
      body,
      channelId,
      imageUrl,
      color,
      icon,
      clickAction,
    ];
  }

  static Notification decode(Object result) {
    result as List<Object?>;
    return Notification(
      title: result[0] as String?,
      body: result[1] as String?,
      channelId: result[2] as String?,
      imageUrl: result[3] as String?,
      color: result[4] as String?,
      icon: result[5] as String?,
      clickAction: result[6] as String?,
    );
  }
}

class RuStorePush {
  /// Constructor for [RuStorePush].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  RuStorePush({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  Future<bool> available() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_rustore_push.RuStorePush.available';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<String> getToken() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_rustore_push.RuStorePush.getToken';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<void> deleteToken() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_rustore_push.RuStorePush.deleteToken';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> subscribeToTopic(String topicName) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_rustore_push.RuStorePush.subscribeToTopic';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[topicName]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> unsubscribeFromTopic(String topicName) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_rustore_push.RuStorePush.unsubscribeFromTopic';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[topicName]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _RuStorePushCallbacksCodec extends StandardMessageCodec {
  const _RuStorePushCallbacksCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Message) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is Notification) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Message.decode(readValue(buffer)!);
      case 129: 
        return Notification.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class RuStorePushCallbacks {
  static const MessageCodec<Object?> pigeonChannelCodec = _RuStorePushCallbacksCodec();

  Future<void> newToken(String token);

  Future<void> messageReceived(Message message);

  Future<void> deletedMessages();

  Future<void> error(String error);

  static void setup(RuStorePushCallbacks? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.newToken', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.newToken was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_token = (args[0] as String?);
          assert(arg_token != null,
              'Argument for dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.newToken was null, expected non-null String.');
          try {
            await api.newToken(arg_token!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.messageReceived', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.messageReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Message? arg_message = (args[0] as Message?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.messageReceived was null, expected non-null Message.');
          try {
            await api.messageReceived(arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.deletedMessages', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            await api.deletedMessages();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.error', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.error was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.flutter_rustore_push.RuStorePushCallbacks.error was null, expected non-null String.');
          try {
            await api.error(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
