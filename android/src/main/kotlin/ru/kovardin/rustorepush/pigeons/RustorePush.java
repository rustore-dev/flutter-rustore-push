// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.kovardin.rustorepush.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class RustorePush {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Message {
    private @Nullable String messageId;
    public @Nullable String getMessageId() { return messageId; }
    public void setMessageId(@Nullable String setterArg) {
      this.messageId = setterArg;
    }

    private @NonNull Long priority;
    public @NonNull Long getPriority() { return priority; }
    public void setPriority(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"priority\" is null.");
      }
      this.priority = setterArg;
    }

    private @NonNull Long ttl;
    public @NonNull Long getTtl() { return ttl; }
    public void setTtl(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ttl\" is null.");
      }
      this.ttl = setterArg;
    }

    private @NonNull String collapseKey;
    public @NonNull String getCollapseKey() { return collapseKey; }
    public void setCollapseKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"collapseKey\" is null.");
      }
      this.collapseKey = setterArg;
    }

    private @NonNull Map<String, String> data;
    public @NonNull Map<String, String> getData() { return data; }
    public void setData(@NonNull Map<String, String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    private @NonNull Notification notification;
    public @NonNull Notification getNotification() { return notification; }
    public void setNotification(@NonNull Notification setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"notification\" is null.");
      }
      this.notification = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private Message() {}
    public static final class Builder {
      private @Nullable String messageId;
      public @NonNull Builder setMessageId(@Nullable String setterArg) {
        this.messageId = setterArg;
        return this;
      }
      private @Nullable Long priority;
      public @NonNull Builder setPriority(@NonNull Long setterArg) {
        this.priority = setterArg;
        return this;
      }
      private @Nullable Long ttl;
      public @NonNull Builder setTtl(@NonNull Long setterArg) {
        this.ttl = setterArg;
        return this;
      }
      private @Nullable String collapseKey;
      public @NonNull Builder setCollapseKey(@NonNull String setterArg) {
        this.collapseKey = setterArg;
        return this;
      }
      private @Nullable Map<String, String> data;
      public @NonNull Builder setData(@NonNull Map<String, String> setterArg) {
        this.data = setterArg;
        return this;
      }
      private @Nullable Notification notification;
      public @NonNull Builder setNotification(@NonNull Notification setterArg) {
        this.notification = setterArg;
        return this;
      }
      public @NonNull Message build() {
        Message pigeonReturn = new Message();
        pigeonReturn.setMessageId(messageId);
        pigeonReturn.setPriority(priority);
        pigeonReturn.setTtl(ttl);
        pigeonReturn.setCollapseKey(collapseKey);
        pigeonReturn.setData(data);
        pigeonReturn.setNotification(notification);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("messageId", messageId);
      toMapResult.put("priority", priority);
      toMapResult.put("ttl", ttl);
      toMapResult.put("collapseKey", collapseKey);
      toMapResult.put("data", data);
      toMapResult.put("notification", (notification == null) ? null : notification.toMap());
      return toMapResult;
    }
    static @NonNull Message fromMap(@NonNull Map<String, Object> map) {
      Message pigeonResult = new Message();
      Object messageId = map.get("messageId");
      pigeonResult.setMessageId((String)messageId);
      Object priority = map.get("priority");
      pigeonResult.setPriority((priority == null) ? null : ((priority instanceof Integer) ? (Integer)priority : (Long)priority));
      Object ttl = map.get("ttl");
      pigeonResult.setTtl((ttl == null) ? null : ((ttl instanceof Integer) ? (Integer)ttl : (Long)ttl));
      Object collapseKey = map.get("collapseKey");
      pigeonResult.setCollapseKey((String)collapseKey);
      Object data = map.get("data");
      pigeonResult.setData((Map<String, String>)data);
      Object notification = map.get("notification");
      pigeonResult.setNotification((notification == null) ? null : Notification.fromMap((Map)notification));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Notification {
    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String body;
    public @Nullable String getBody() { return body; }
    public void setBody(@Nullable String setterArg) {
      this.body = setterArg;
    }

    private @Nullable String channelId;
    public @Nullable String getChannelId() { return channelId; }
    public void setChannelId(@Nullable String setterArg) {
      this.channelId = setterArg;
    }

    private @Nullable String imageUrl;
    public @Nullable String getImageUrl() { return imageUrl; }
    public void setImageUrl(@Nullable String setterArg) {
      this.imageUrl = setterArg;
    }

    private @Nullable String color;
    public @Nullable String getColor() { return color; }
    public void setColor(@Nullable String setterArg) {
      this.color = setterArg;
    }

    private @Nullable String icon;
    public @Nullable String getIcon() { return icon; }
    public void setIcon(@Nullable String setterArg) {
      this.icon = setterArg;
    }

    private @Nullable String clickAction;
    public @Nullable String getClickAction() { return clickAction; }
    public void setClickAction(@Nullable String setterArg) {
      this.clickAction = setterArg;
    }

    public static final class Builder {
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String body;
      public @NonNull Builder setBody(@Nullable String setterArg) {
        this.body = setterArg;
        return this;
      }
      private @Nullable String channelId;
      public @NonNull Builder setChannelId(@Nullable String setterArg) {
        this.channelId = setterArg;
        return this;
      }
      private @Nullable String imageUrl;
      public @NonNull Builder setImageUrl(@Nullable String setterArg) {
        this.imageUrl = setterArg;
        return this;
      }
      private @Nullable String color;
      public @NonNull Builder setColor(@Nullable String setterArg) {
        this.color = setterArg;
        return this;
      }
      private @Nullable String icon;
      public @NonNull Builder setIcon(@Nullable String setterArg) {
        this.icon = setterArg;
        return this;
      }
      private @Nullable String clickAction;
      public @NonNull Builder setClickAction(@Nullable String setterArg) {
        this.clickAction = setterArg;
        return this;
      }
      public @NonNull Notification build() {
        Notification pigeonReturn = new Notification();
        pigeonReturn.setTitle(title);
        pigeonReturn.setBody(body);
        pigeonReturn.setChannelId(channelId);
        pigeonReturn.setImageUrl(imageUrl);
        pigeonReturn.setColor(color);
        pigeonReturn.setIcon(icon);
        pigeonReturn.setClickAction(clickAction);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("title", title);
      toMapResult.put("body", body);
      toMapResult.put("channelId", channelId);
      toMapResult.put("imageUrl", imageUrl);
      toMapResult.put("color", color);
      toMapResult.put("icon", icon);
      toMapResult.put("clickAction", clickAction);
      return toMapResult;
    }
    static @NonNull Notification fromMap(@NonNull Map<String, Object> map) {
      Notification pigeonResult = new Notification();
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object body = map.get("body");
      pigeonResult.setBody((String)body);
      Object channelId = map.get("channelId");
      pigeonResult.setChannelId((String)channelId);
      Object imageUrl = map.get("imageUrl");
      pigeonResult.setImageUrl((String)imageUrl);
      Object color = map.get("color");
      pigeonResult.setColor((String)color);
      Object icon = map.get("icon");
      pigeonResult.setIcon((String)icon);
      Object clickAction = map.get("clickAction");
      pigeonResult.setClickAction((String)clickAction);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class PushClientCodec extends StandardMessageCodec {
    public static final PushClientCodec INSTANCE = new PushClientCodec();
    private PushClientCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Message.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return Notification.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Message) {
        stream.write(128);
        writeValue(stream, ((Message) value).toMap());
      } else 
      if (value instanceof Notification) {
        stream.write(129);
        writeValue(stream, ((Notification) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PushClient {
    void initialize(@NonNull String project, Result<String> result);
    void onNewToken(Result<String> result);
    void onMessageReceived(Result<Message> result);
    void onDeletedMessages(Result<Void> result);
    void onError(Result<String> result);

    /** The codec used by PushClient. */
    static MessageCodec<Object> getCodec() {
      return       PushClientCodec.INSTANCE;    }
    /**Sets up an instance of `PushClient` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PushClient api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushClient.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String projectArg = (String)args.get(0);
              if (projectArg == null) {
                throw new NullPointerException("projectArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.initialize(projectArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushClient.onNewToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.onNewToken(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushClient.onMessageReceived", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Message> resultCallback = new Result<Message>() {
                public void success(Message result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.onMessageReceived(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushClient.onDeletedMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.onDeletedMessages(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushClient.onError", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.onError(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
